{
  "heading": "Реализация компонента DashboardPage по методологии 3RApp",
  "chapter": "8.3",
  "input_data": "Компонент DashboardPage реализует основную страницу рабочего стола корпоративного портала StaffFlow. На странице отображаются персональные данные, статистика пользователя, список задач и корпоративные новости. Компонент объединяет несколько бизнес-компонентов и использует данные из глобального состояния, управляемого Redux Toolkit.",
  "answer": [
    {
      "type": "code",
      "title": "Файл: src/pages/DashboardPage.jsx",
      "code": "import {useSelector, useDispatch} from 'react-redux';\nimport {selectAuth, selectTask, changeSelectedTaskId} from '../store';\nimport {Statistics, TaskList, TaskDetails, NewsFeed} from '../business';\nimport {Header} from '../components';\n\nexport const DashboardPage = () => {\n    /**\n     * Можно было бы хранить состояние выбранной задачи локально через хук useState, но компонент TaskDetails\n     * переиспользуется и в дашборде и на странице задачи, поэтому нужно хранить состояние в сторе и таким \n     * образом пользователь увидит ту же выбранную задачу и при переходе в раздел задач.\n     */\n    const task = useSelector(selectTask);\n    const auth = useSelector(selectAuth); // слайс auth\n    const dispatch = useDispatch();\n    /**В компоненте с ролью страница нет нужды делать проверку залогинен ли пользователь. Это нужно сделать \n     * в компоненте с ролью лэйаут, так как он встраивается в каждую страницу приложения и код для проверки состояния \n     * будет написан в одном месте. Компоненты с ролью страница являются дочерними для компонента с ролью лэйаут и \n     * тогда проверку пришлось бы дублировать. \n     */\n\n    const handleClick = (taskId) => {\n        dispatch(changeSelectedTaskId(taskId));\n    };\n\n    return (\n        <>\n        <section>\n            <div>{/**<Header type=\"h1\" title=\"Дашборд\" /> */}Дашборд</div>\n            <div>{/**<Header type=\"h2\" title={`Добро пожаловать, ${auth.user.name}`} /> */}Добро пожаловать</div>\n            <div>{/**<Statistics /> Самостоятельно отвечает за получение данных, а id берёт из стора*/}Statistics</div>\n            <hr />\n        </section>\n        <section>\n            <div>{/**<Header type=\"h2\" title=\"Мои задачи\" /> */}Мои задачи</div>\n            <div>{/**<TaskList onClick={handleClick} /> */}TaskList</div>\n            <div>{/**{ task.selectedTaskId !== null && <TaskDetails /> } */}TaskDetails</div>\n            <hr />\n        </section>\n        <section>\n            <div>{/**<Header type=\"h2\" title=\"Новости\" /> */}Новости</div>\n            <div>{/**<NewsFeed /> */}NewsFeed</div>\n        </section>\n        </>\n    );\n};"
    },
    {
      "type": "array",
      "title": "Комментарии к реализации",
      "array": [
        "Компонент DashboardPage выполняет роль страницы и объединяет несколько независимых бизнес-компонентов: Statistics, TaskList, TaskDetails и NewsFeed.",
        "Используются селекторы selectAuth и selectTask, что обеспечивает централизованное хранение состояния в Redux Toolkit.",
        "Выбранная задача хранится в сторе, а не в локальном состоянии, чтобы сохранять выбранный контекст между разделами (например, между DashboardPage и TasksPage).",
        "Обработка клика по задаче реализована через action changeSelectedTaskId, который изменяет текущее состояние задачи в слайсе task.",
        "Проверка авторизации вынесена из страницы в компонент Layout, чтобы исключить дублирование логики проверки для всех страниц.",
        "В JSX структура компонента разделена на три секции: общая информация и статистика, задачи, и новости.",
        "Каждый из бизнес-компонентов отвечает сам за получение данных (через RTK Query или селекторы стора). DashboardPage служит точкой интеграции."
      ]
    },
    {
      "type": "array",
      "title": "Бизнес-компоненты, используемые в DashboardPage",
      "array": [
        "Statistics — получает и отображает сводную информацию о пользователе и его активности.",
        "TaskList — выводит последние задачи, позволяет выбрать задачу для просмотра подробностей.",
        "TaskDetails — отображает данные выбранной задачи, используя состояние из стора.",
        "NewsFeed — отображает актуальные корпоративные новости и анонсы."
      ]
    },
    {
      "type": "array",
      "title": "Принципы реализации в соответствии с чек-листом",
      "array": [
        "Определено назначение компонента (DashboardPage как точка интеграции данных).",
        "Выделены зависимости и подключены бизнес-компоненты.",
        "Добавлена обработка пользовательских действий через Redux dispatch.",
        "В JSX предусмотрено деление на логические секции и комментарии для будущей интеграции заголовков и компонентов.",
        "Структура кода соответствует роли страницы — компонент не содержит бизнес-логику, а только связывает данные и интерфейс."
      ]
    },
    {
      "type": "array",
      "title": "Заключение",
      "array": [
        "Компонент DashboardPage демонстрирует реализацию в соответствии с принципами 3RApp и руководством по созданию компонентов.",
        "Код отражает чистое разделение ответственности: страница интегрирует данные и компоненты, бизнес-компоненты обрабатывают данные, а Layout управляет проверкой состояния авторизации."
      ]
    }
  ]
}
